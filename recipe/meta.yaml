{% set version = "18.1.8" %}

{% if sys_abi is undefined %}
{% set sys_abi = "dummy" %}
{% set hardening = "dummy" %}
{% endif %}

package:
  name: libcxx_and_libcxxabi
  version: {{ version }}

source:
  - url: https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-{{ version.replace(".rc", "-rc") }}.tar.gz
    sha256: 09c08693a9afd6236f27a2ebae62cda656eba19021ef3f94d59e931d662d4856
    patches:
      # See https://discourse.llvm.org/t/shipping-custom-libc-on-macos/58606
      - patches/0001-Fix-ABI-compatibility-with-system.patch    # [sys_abi == "pre-12"]
      - patches/0002-custom-error-message-for-old-sdk.patch
      # disable feature that requires up-to-date libcxxabi, which we don't ship
      - patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch
      # work around https://github.com/llvm/llvm-project/issues/90332
      - patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch

build:
  number: 2
  skip: true  # [win]
  skip: true  # [ppc64le or aarch64]
  ignore_run_exports:
    - libstdcxx-ng
  missing_dso_whitelist:
    - /usr/lib/libc++abi.dylib

# use selectors here so smithy breaks up CI jobs
# [sys_abi]
# [hardening]

requirements:
  build:
    - cmake
    - ninja
    - {{ compiler('cxx') }}
    - {{ stdlib('c') }}
    - python >3               # [not osx]
  host:
    - clangdev {{ version }}  # [not osx]
    - llvmdev {{ version }}   # [not osx]

outputs:
  - name: libcxx
    build:
      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}        # [hardening == "none"]
      string: debug_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [hardening == "debug"]
      run_exports:                                      # [hardening == "debug"]
        # packages built with hardened lib must not be installable without extra label
        - libcxx =*=debug*                              # [hardening == "debug"]
    files:
      - include/c++                 # [unix]
      - lib/libc++.*                # [unix]
      - lib/libc++experimental.*    # [unix]
      - Library/include/c++         # [win]
      - Library/bin/c++*.dll        # [win]
      - Library/lib/c++*.lib        # [win]
      - Library/lib/libc++*.lib     # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
      run:
        - {{ pin_subpackage("libcxxabi", exact=True) }}    # [linux]
      run_constrained:
        - __osx <12                                        # [osx and (sys_abi == "pre-12")]
        - sysroot_{{ target_platform }} >={{ c_stdlib_version }}    # [linux]

    # package for old sys_abi is not installable on macOS-12 image anymore
    {% if sys_abi != "pre-12" %}
    test:
      requires:
        - clang                  # [osx]
        - clangxx
        - ld64                   # [osx]
        - cctools                # [osx]
        - llvm-tools             # [osx]
        - {{ compiler('cxx') }}  # [not osx]
      files:
        - test_sources
        - compile_test.sh   # [unix]
        - compile_test.bat  # [win]
      commands:
        # Dummy var for different hashes
        - echo {{ dummy_var }}                                    # [osx]
        - echo {{ sys_abi }}                                      # [osx]
        - if not exist %LIBRARY_INC%\\c++\\v1\\iterator exit 1    # [win]
        - test -f $PREFIX/include/c++/v1/iterator                 # [unix]
        - bash compile_test.sh                                    # [unix]
        - compile_test.bat                                        # [win]
        # make sure we inserted link to our docs wherever it is necessary;
        # i.e. everywhere there's a string "availability(macos,...,introduced=<ver>)" for osx version >10.13;
        # 'grep -v' inverts the match but returns non-zero exit code if no lines are returned; so we use 'wc -l';
        # we want to have zero lines that don't either: contain our link or are for <=10.13 (lowest occurring in that file is 10.9)
        - if [ 0 -eq $(cat ${PREFIX}/include/c++/v1/__availability | grep "availability(macos" | grep -vE "(conda-forge|10.9|10.1[0-3])" | wc -l) ]; then exit 0; else exit 1; fi  # [osx]
        # !!!!!!!!!!!! README !!!!!!!!!!!!!!!!!!
        # we do not ship libcxxabi on OSX - this breaks exception passing
        - if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi  # [osx]
        - test -f $PREFIX/lib/libc++abi.so                        # [linux]

      # Following 2 projects had issues with libc++, so check them
      # before releasing just to be sure.
      downstreams:              # [osx]
        - python-symengine      # [osx]
        - openturns             # [osx]
        # test current libcxx against old clang builds;
        # version correspondence is 0.{{ CLANG_MAJOR }}
        # these tests are unusual in that they use -Wl,-rpath, but not -L.
        # we'd need the pre-12 system libcxx, but azure deleted the macOS-11 image
        - libcxx-testing 0.18   # [osx]
        - libcxx-testing 0.17   # [osx]
        - libcxx-testing 0.16   # [osx]
        - libcxx-testing 0.15   # [osx]
    {% endif %}

  - name: libcxxabi
    build:
      skip: true  # [not linux]
    files:
      - lib/libc++abi.*
    requirements:
      build:
        # for run-exports
        - {{ stdlib('c') }}
    test:
      commands:
        - test -f $PREFIX/lib/libc++abi.so  # [linux]

about:
  home: http://libcxx.llvm.org/
  license: Apache-2.0 WITH LLVM-exception
  license_file: libcxx/LICENSE.TXT
  license_family: Apache
  summary: LLVM C++ standard library
  dev_url: https://github.com/llvm/llvm-project

extra:
  recipe-maintainers:
    - SylvainCorlay
    - inducer
    - jakirkham
    - isuruf
    - beckermr
    - timsnyder
    - h-vetinari
  feedstock-name: libcxx
