{% set version = "16.0.6" %}
{% set major = version.split(".")[0] %}

{% if sys_abi is undefined %}
{% set sys_abi = "dummy" %}
{% endif %}

package:
  name: libcxx_and_libcxxabi
  version: {{ version }}

source:
  - url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version.replace(".rc", "-rc") }}/llvm-project-{{ version.replace(".rc", "rc") }}.src.tar.xz
    sha256: ce5e71081d17ce9e86d7cbcfa28c4b04b9300f8fb7e78422b1feb6bc52c3028e
    patches:
      - patches/0002-Support-legacy-standalone-builds.patch
      # See https://discourse.llvm.org/t/shipping-custom-libc-on-macos/58606
      - patches/0003-Fix-ABI-compatibility-with-system.patch    # [sys_abi == "pre-12"]
      - patches/0004-custom-error-message-for-old-sdk.patch
      # upstream removed fallbacks in case the underlying libc didn't support C11 in
      # https://github.com/llvm/llvm-project/commit/21f73d5826fb5024a27eaacafadfa316f58949c5;
      # however, it seems that the then-required using_if_exists does not work as desired yet
      - patches/0005-Revert-libc-Remove-workaround-for-C11-features-on-co.patch

build:
  number: 1
  skip: true  # [win]
  skip: true  # [ppc64le or aarch64]

# use selectors here so smithy breaks up CI jobs
# [sys_abi]

requirements:
  build:
    - cmake
    - ninja
    - {{ compiler('cxx') }}
    - {{ compiler('c') }}
    - {{ stdlib('c') }}
    - python >3               # [not osx]
  host:
    - clangdev {{ version }}  # [not osx]
    - llvmdev {{ version }}   # [not osx]

outputs:
  - name: libcxx-devel
    # temporarily still in libcxx, until we update compiler stack w.r.t. libcxx-devel
    # files:
    #   - include/c++                 # [unix]
    #   - lib/libc++.a                # [unix]
    #   - lib/libc++experimental.*    # [unix]
    #   - Library/include/c++         # [win]
    #   - Library/lib/c++*.lib        # [win]
    #   - Library/lib/libc++*.lib     # [win]
    requirements:
      host:
        - {{ pin_subpackage("libcxx", exact=True) }}
      run:
        - {{ pin_subpackage("libcxx", exact=True) }}
      run_constrained:
        - __osx <12     # [osx and (sys_abi == "pre-12")]

    # package for old sys_abi is not installable on macOS-12 image anymore
    {% if sys_abi != "pre-12" %}
    test:
      requires:
        - clang                  # [osx]
        - clangxx
        - ld64                   # [osx]
        - cctools                # [osx]
        - llvm-tools             # [osx]
        - {{ compiler('cxx') }}  # [not osx]
      files:
        - test_sources
        - compile_test.sh   # [unix]
        - compile_test.bat  # [win]
      commands:
        # Dummy var for different hashes
        - echo {{ dummy_var }}                                    # [osx]
        - echo {{ sys_abi }}                                      # [osx]
        - if not exist %LIBRARY_INC%\\c++\\v1\\iterator exit 1    # [win]
        - test -f $PREFIX/include/c++/v1/iterator                 # [unix]
        - bash compile_test.sh                                    # [unix]
        - compile_test.bat                                        # [win]
        # make sure we inserted link to our docs wherever it is necessary;
        # i.e. everywhere there's a string "availability(macos,...,introduced=<ver>)" for osx version >10.9;
        # 'grep -v' inverts the match but returns non-zero exit code if no lines are returned; so we use 'wc -l';
        # we want to have zero lines that don't either: contain the link or are for 10.9
        - if [ 0 -eq $(cat ${PREFIX}/include/c++/v1/__availability | grep "availability(macos" | grep -vE "(conda-forge|10.9)" | wc -l) ]; then exit 0; else exit 1; fi  # [osx]
        # !!!!!!!!!!!! README !!!!!!!!!!!!!!!!!!
        # we do not ship libcxxabi on OSX - this breaks exception passing
        - if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi  # [osx]
        - test -f $PREFIX/lib/libc++abi.so                        # [linux]

      # Following 2 projects had issues with libc++, so check them
      # before releasing just to be sure.
      downstreams:              # [osx]
        - python-symengine      # [osx]
        - openturns             # [osx]
        # test current libcxx against old clang builds;
        # version correspondence is 0.{{ CLANG_MAJOR }}.{{ LIBCXX_MAJOR }}
        # these tests are unusual in that they use -Wl,-rpath, but not -L.
        - libcxx-testing 0.16.{{ major }}   # [osx]
        - libcxx-testing 0.15.{{ major }}   # [osx]
        - libcxx-testing 0.14.{{ major }}   # [osx]
        - libcxx-testing 0.13.{{ major }}   # [osx]
        - libcxx-testing 0.12.{{ major }}   # [osx]
        - libcxx-testing 0.11.{{ major }}   # [osx]
    {% endif %}

  - name: libcxx
    build:
      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}        # [hardening == "none"]
      string: debug_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [hardening == "debug"]
      run_exports:                                      # [hardening == "debug"]
        # packages built with hardened lib must not be installable without extra label
        - libcxx =*=debug*                              # [hardening == "debug"]
      ignore_run_exports_from:
        # we want to ignore libstdcxx, but not libgcc; the latter also comes in through
        # compiler('c'), and conda keeps that despite ignoring the cxx run-exports
        - {{ compiler('cxx') }}
    files:
      - lib/libc++.so               # [linux]
      - lib/libc++.so.*             # [linux]
      - lib/libc++.dylib            # [osx]
      - lib/libc++.*.dylib          # [osx]
      - Library/bin/c++*.dll        # [win]
    # temporarily still in libcxx, until we update compiler stack w.r.t. libcxx-devel
      - include/c++                 # [unix]
      - lib/libc++.a                # [unix]
      - lib/libc++experimental.*    # [unix]
      - Library/include/c++         # [win]
      - Library/lib/c++*.lib        # [win]
      - Library/lib/libc++*.lib     # [win]
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
      host:
        - {{ pin_subpackage("libcxxabi", exact=True) }}    # [linux]
      run:
        - {{ pin_subpackage("libcxxabi", exact=True) }}    # [linux]
      run_constrained:
        - sysroot_{{ target_platform }} >={{ c_stdlib_version }}    # [linux]
    test:
      commands:
        # presence of shared libraries
        - test -f $PREFIX/lib/libc++.so                 # [linux]
        - test -f $PREFIX/lib/libc++.dylib              # [osx]
        # absence of static libs & headers
        # - test ! -f $PREFIX/lib/libc++.a                # [unix]
        # - test ! -f $PREFIX/lib/libc++experimental.a    # [unix]
        # - test ! -d $PREFIX/include/c++                 # [unix]

  - name: libcxxabi
    build:
      skip: true  # [not linux]
    files:
      - lib/libc++abi.*
    requirements:
      build:
        # for run-exports
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
      run_constrained:
        - libcxx {{ version }}.*
    test:
      commands:
        - test -f $PREFIX/lib/libc++abi.so  # [linux]

about:
  home: http://libcxx.llvm.org/
  license: Apache-2.0 WITH LLVM-exception
  license_file: libcxx/LICENSE.TXT
  license_family: Apache
  summary: LLVM C++ standard library
  dev_url: https://github.com/llvm/llvm-project

extra:
  recipe-maintainers:
    - SylvainCorlay
    - inducer
    - jakirkham
    - isuruf
    - beckermr
    - timsnyder
    - h-vetinari
  feedstock-name: libcxx
